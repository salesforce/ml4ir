# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
# Reference doc: https://circleci.com/docs/2.0/project-walkthrough/
version: 2.1
jobs:
  build_test_jvm_integration:
    docker:
      - image: ducouloa/ml4ir:0.1
    resource_class: xlarge
    steps:
      - checkout
      - restore_cache:
          key: maven-python-deps-{{ checksum "jvm/pom.xml" }}-{{ checksum "python/build-requirements.txt" }}
      - run:
          name: Install Python deps in a venv
          command: |
            sudo apt-get --allow-releaseinfo-change update
            sudo apt-get install graphviz graphviz-dev
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install -r python/build-requirements.txt
      - run:
          name: Build
          command: |
            cd jvm
            mvn clean -Dmaven.test.skip=true install
      - save_cache:
          key: maven-python-deps-{{ checksum "jvm/pom.xml" }}-{{ checksum "python/build-requirements.txt" }}
          paths:
            - ~/.m2
            - "venv"
      - run:
          name: Run JVM tests and integration tests
          command: |
            . venv/bin/activate
            cd jvm
            mvn verify -Pintegration_tests
      - store_test_results:
          path: jvm/ml4ir-inference/target

  build_test_python_base:
    docker:
      - image: circleci/python:3.7.7
    resource_class: xlarge
    steps:
      - checkout
      - restore_cache:
          key: python-deps-{{ checksum "python/build-requirements.txt" }}
      - run:
          name: Install Python deps in a venv
          command: |
            sudo apt-get --allow-releaseinfo-change update
            sudo apt-get install graphviz graphviz-dev
            python3 -m venv venv
            . venv/bin/activate
            cd python
            pip install --upgrade pip
            pip install -r build-requirements.txt
      - save_cache:
          key: python-deps-{{ checksum "python/build-requirements.txt" }}
          paths:
            - "venv"
      - run:
          name: Run Python tests
          command: |
            . venv/bin/activate
            cd python
            COVERAGE_FILE=reports/.coverage.base coverage run --include "ml4ir/*" -m pytest ml4ir/base/tests/ --junitxml=test_results/results.xml
          no_output_timeout: 45m  # Time for running the tests before we timeout
      - persist_to_workspace:
          root: python/reports
          paths:
            - .coverage.base
      - store_test_results:
          path: python/test_results

  build_test_python_classification:
    docker:
      - image: circleci/python:3.7.7
    resource_class: xlarge
    steps:
      - checkout
      - restore_cache:
          key: python-deps-{{ checksum "python/build-requirements.txt" }}
      - run:
          name: Install Python deps in a venv
          command: |
            sudo apt-get --allow-releaseinfo-change update
            sudo apt-get install graphviz graphviz-dev
            python3 -m venv venv
            . venv/bin/activate
            cd python
            pip install --upgrade pip
            pip install -r build-requirements.txt
      - save_cache:
          key: python-deps-{{ checksum "python/build-requirements.txt" }}
          paths:
            - "venv"
      - run:
          name: Run Python tests
          command: |
            . venv/bin/activate
            cd python
            COVERAGE_FILE=reports/.coverage.classif coverage run  --include "ml4ir/*" -m pytest ml4ir/applications/classification/tests/ --junitxml=test_results/results.xml
          no_output_timeout: 45m  # Time for running the tests before we timeout
      - persist_to_workspace:
          root: python/reports
          paths:
            - .coverage.classif
      - store_test_results:
          path: python/test_results

  build_test_python_ranking:
    docker:
      - image: circleci/python:3.7.7
    resource_class: xlarge
    steps:
      - checkout
      - restore_cache:
          key: python-deps-{{ checksum "python/build-requirements.txt" }}
      - run:
          name: Install Python deps in a venv
          command: |
            sudo apt-get --allow-releaseinfo-change update
            sudo apt-get install graphviz graphviz-dev
            python3 -m venv venv
            . venv/bin/activate
            cd python
            pip install --upgrade pip
            pip install -r build-requirements.txt
      - save_cache:
          key: python-deps-{{ checksum "python/build-requirements.txt" }}
          paths:
            - "venv"
      - run:
          name: Run Python tests
          command: |
            . venv/bin/activate
            cd python
            COVERAGE_FILE=reports/.coverage.ranking coverage run --include "ml4ir/*" -m pytest ml4ir/applications/ranking/tests/ --junitxml=test_results/results.xml
          no_output_timeout: 45m  # Time for running the tests before we timeout
      - persist_to_workspace:
          root: python/reports
          paths:
            - .coverage.ranking
      - store_test_results:
          path: python/test_results

  build_test_coverage:
    docker:
      - image: circleci/python:3.7.7
    resource_class: medium
    steps:
      - checkout
      - restore_cache:
          key: python-deps-{{ checksum "python/build-requirements.txt" }}
      - run:
          name: Install Python deps in a venv
          command: |
            sudo apt-get --allow-releaseinfo-change update
            sudo apt-get install graphviz graphviz-dev
            python3 -m venv venv
            . venv/bin/activate
            cd python
            pip install --upgrade pip
            pip install -r build-requirements.txt
      - save_cache:
          key: python-deps-{{ checksum "python/build-requirements.txt" }}
          paths:
            - "venv"
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: reports
      - run:
          name: Run Python Coverage
          command: |
            . venv/bin/activate
            coverage combine reports/.coverage.ranking reports/.coverage.classif
            coverage report
            coverage html --fail-under=75
          no_output_timeout: 45m  # Time for running the tests before we timeout
      - store_artifacts:
          path: /home/circleci/project/htmlcov

workflows:
  version: 2.1
  build_and_test:
    jobs:
      - build_test_jvm_integration
      - build_test_python_base
      - build_test_python_ranking
      - build_test_python_classification
      - build_test_coverage:
          requires:
            - build_test_python_base
            - build_test_python_ranking
            - build_test_python_classification